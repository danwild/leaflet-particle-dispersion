{"version":3,"file":"leaflet-particle-dispersion.js","sources":["../src/js/L.ParticleDispersionLayer.js"],"sourcesContent":["\n// dependencies\nimport chroma from 'chroma-js';\nimport heatmap from 'heatmap.js';\nimport turf from 'turf';\nimport heatBin from 'leaflet-heatbin';\n\nconst ParticleDispersionLayer = (L.Layer ? L.Layer : L.Class).extend({\n\n\t// particle data indices\n\t_pidIndex:    0,\n\t_pLatIndex:   1,\n\t_pLonIndex:   0,\n\t_pDepthIndex: 2,\n\t_pAgeIndex:   3,\n\t//_pidIndex:    0,\n\t//_pLatIndex:   1 + 1,\n\t//_pLonIndex:   0 + 1,\n\t//_pDepthIndex: 2 + 1,\n\t//_pAgeIndex:   3 + 1,\n\n\t// misc\n\t_particleLayer: null,\n\t_frameIndex:   0,\n\t_markers:      [],\n\t_colors:       null,\n\n\t/*------------------------------------ LEAFLET SPECIFIC ------------------------------------------*/\n\n\t_active: false,\n\t_map:      null,\n\t// the L.canvas renderer\n\t_renderer: null,\n\t// the DOM leaflet-pane that contains html canvas\n\t_pane:     null,\n\n\t// user options\n\toptions: {\n\t\tdata:            null,\n\t\tdisplayMode:     '',\n\t\tstartFrameIndex: 0,\n\t\tageColorScale:   null,\n\t\tageDomain:       null,\n\t\theatOptions: {\n\t\t\tblur: 1,\n\t\t\t// radius should be small ONLY if scaleRadius is true (or small radius is intended)\n\t\t\t// if scaleRadius is false it will be the constant radius used in pixels\n\t\t\t\"radiusMeters\": 1000,\n\t\t\t\"fixedRadius\": false,\n\t\t\t\"radius\": 20,\n\t\t\t\"heatBin\": {\n\t\t\t\t\"enabled\": false,\n\t\t\t\t\"cellSizeKm\": 1\n\t\t\t},\n\t\t\t\"maxOpacity\": .8,\n\t\t\t// scales the radius based on map zoom\n\t\t\t\"scaleRadius\": false,\n\t\t\t// if set to false the heatmap uses the global maximum for colorization\n\t\t\t// if activated: uses the data maximum within the current map boundaries\n\t\t\t//   (there will always be a red spot with useLocalExtremas true)\n\t\t\t\"useLocalExtrema\": false,\n\t\t\t// which field name in your data represents the latitude - default \"lat\"\n\t\t\tlatField: 'lat',\n\t\t\t// which field name in your data represents the longitude - default \"lng\"\n\t\t\tlngField: 'lng',\n\t\t\t// which field name in your data represents the data value - default \"value\"\n\t\t\tvalueField: 'value'\n\t\t},\n\t\texposureIntensity: 1,\n\t\tfinalIntensity: 1\n\t},\n\n\tinitialize: function (options) {\n\t\t// (L.setOptions was not working as expected)\n\t\tthis.options = this._extendObject(this.options, options);\n\t},\n\n\t/**\n\t * Initialise renderer when layer is added to the map / becomes active,\n\t * and draw circle markers if user has specified the displayMode\n\t *\n\t * @param map {Object} Leaflet map\n\t */\n\tonAdd: function (map) {\n\t\tthis._active = true;\n\t\tthis._map = map;\n\t\tthis._createRenderer();\n\t\tif (this.options.displayMode) this.setDisplayMode(this.options.displayMode);\n\t},\n\n\t/**\n\t * Remove the pane from DOM, and void renderer when layer removed from map\n\t */\n\tonRemove () {\n\t\tthis._map.removeLayer(this._particleLayer);\n\t\tL.DomUtil.remove(this._pane);\n\t\tthis._renderer = null;\n\t\tthis._particleLayer = null;\n\t\tthis._active = false;\n\t},\n\n\t/*------------------------------------ PUBLIC ------------------------------------------*/\n\n\t/**\n\t * check if the particle layer is currently active on the map\n\t * @returns {boolean}\n\t */\n\tisActive () {\n\t\treturn this._active;\n\t},\n\n\t/**\n\t * Update the layer with new data\n\t * @param data\n\t */\n\tsetData (data) {\n\t\tthis.options.data = data;\n\t\tthis.setDisplayMode(this.options.displayMode);\n\t},\n\n\t/**\n\t * Set options object, updates layer\n\t * @param options\n\t */\n\tsetOptions (options) {\n\t\tthis.options = this._extendObject(this.options, options);\n\t\tthis.update();\n\t},\n\n\t/**\n\t * Trigger layer update/redraw\n\t */\n\tupdate () {\n\t\tthis.setDisplayMode(this.options.displayMode);\n\t},\n\n\t/**\n\t * Set the display mode of the layer\n\t * @param mode {string} One of: ['FINAL', 'EXPOSURE', 'KEYFRAME']\n\t */\n\tsetDisplayMode (mode) {\n\n\t\tthis.options.displayMode = mode;\n\n\t\tif (!this.isActive()) return;\n\n\t\tswitch (this.options.displayMode) {\n\n\t\t\tcase 'EXPOSURE':\n\t\t\t\tthis._initDisplayExposure();\n\t\t\t\tbreak;\n\n\t\t\tcase 'FINAL':\n\t\t\t\tthis._initDisplayFinal();\n\t\t\t\tbreak;\n\n\t\t\tcase 'KEYFRAME':\n\t\t\t\tthis._initDisplayKeyframe();\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error(`Attempted to initialise with invalid displayMode: ${this.options.displayMode}`);\n\t\t\t\tbreak;\n\t\t}\n\t},\n\n\t/**\n\t * Returns the current `displayMode`\n\t * @returns {string} One of: ['FINAL', 'EXPOSURE', 'KEYFRAME', null]\n\t */\n\tgetDisplayMode () {\n\t\treturn this.options.displayMode;\n\t},\n\n\t/**\n\t * Display the particles at the given frame index\n\t * @param index {number} the keyframe index\n\t */\n\tsetFrameIndex (index) {\n\n\t\tif (!this.isActive()) return;\n\t\tconst self = this;\n\t\tself._frameIndex = index;\n\n\t\tconst keys = Object.keys(self.options.data);\n\t\tconst frame = self.options.data[keys[index]];\n\n\t\t// there's no addLayer*s* function, either need to add each\n\t\t// L.circleMarker individually, or reinit the entire layer\n\t\tif (self._particleLayer) self._particleLayer.clearLayers();\n\n\t\tfor (let i = 0; i < frame.length; i++) {\n\n\t\t\tconst particle = frame[i];\n\t\t\tconst pos = self._map.wrapLatLng([particle[self._pLatIndex], particle[self._pLonIndex]]);\n\t\t\tlet marker = L.circleMarker(pos, {\n\t\t\t\trenderer:    self._renderer,\n\t\t\t\tstroke:      false,\n\t\t\t\tfillOpacity: 0.3,\n\t\t\t\tradius: 8,\n\t\t\t\tfillColor:   this._colors(particle[self._pAgeIndex]).hex(),\n\t\t\t\t_feature:    particle\n\n\t\t\t});\n\n\t\t\tself._markers.push(marker);\n\t\t\tself._particleLayer.addLayer(marker);\n\t\t}\n\t},\n\n\t/**\n\t * Returns leaflet LatLngBounds of the layer\n\t */\n\tgetLatLngBounds () {\n\n\t\tif (!this.options.data || !this._map) return null;\n\n\t\t// get keys, flatten the data\n\t\tconst snapshots = this._flattened();\n\n\t\treturn L.latLngBounds(snapshots.map((s) => {\n\t\t\treturn this._map.wrapLatLng([s[this._pLatIndex], s[this._pLonIndex]]);\n\t\t}));\n\t},\n\n\t/*------------------------------------ PRIVATE ------------------------------------------*/\n\n\t_flattened () {\n\t\tlet keys = Object.keys(this.options.data);\n\t\tlet snapshots = [];\n\t\tkeys.forEach((key) => { snapshots = snapshots.concat(this.options.data[key]); });\n\t\treturn snapshots;\n\t},\n\n\t_flattenedPoints () {\n\t\tlet keys = Object.keys(this.options.data);\n\t\tlet snapshots = [];\n\t\tkeys.forEach((key) => { snapshots = snapshots.concat(this.options.data[key]); });\n\n\t\treturn {\n\t\t\ttype: \"FeatureCollection\",\n\t\t\tfeatures: snapshots.map((s) => {\n\t\t\t\treturn {\n\t\t\t\t\t\"type\": \"Feature\",\n\t\t\t\t\t\"geometry\": {\n\t\t\t\t\t\t\"type\": \"Point\",\n\t\t\t\t\t\t\"coordinates\": [s[this._pLonIndex], s[this._pLatIndex]]\n\t\t\t\t\t},\n\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\"id\": s[this._pidIndex],\n\t\t\t\t\t\t\"depth\": s[this._pDepthIndex],\n\t\t\t\t\t\t\"age\": s[this._pAgeIndex]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t},\n\n\t_computeHeatmapGrid () {\n\n\t\t// CREATE BBOX\n\t\tconst bounds = this.getLatLngBounds();\n\t\t// minX, minY, maxX, maxY\n\t\tconst bbox = [\n\t\t\tbounds.getWest(),\n\t\t\tbounds.getNorth(),\n\t\t\tbounds.getEast(),\n\t\t\tbounds.getSouth()\n\t\t];\n\n\t\tconst bottomLeft = [bounds.getWest(), bounds.getSouth()];\n\t\tconst bottomRight = [bounds.getEast(), bounds.getSouth()];\n\t\tconst topLeft = [bounds.getWest(), bounds.getNorth()];\n\t\tconst topRight = [bounds.getEast(), bounds.getNorth()];\n\n\t\t// CREATE A GRID OF CELLS\n\t\t// GRID origin is bottomRight\n\t\t// the indexes increment by:\n\t\t// xCol=0, yRow upwards, then xCol=1 etc.\n\t\tconst lengthKm = 0.25;\n\t\tconst grid = turf.squareGrid(bbox, lengthKm, { units: 'kilometers' });\n\n\t\tgrid.features.reverse();\n\t\tgrid.features.forEach((f, index) => { f.properties['index'] = index; });\n\t\tconsole.log(grid);\n\n\t\t// DEBUG - plot the binning grid on map\n\t\t//L.geoJSON(grid, {\n\t\t//\tstyle: function (feature) {\n\t\t//\t\treturn {\n\t\t//\t\t\tweight: 1,\n\t\t//\t\t\tfill: false\n\t\t//\t\t}\n\t\t//\t},\n\t\t//\tonEachFeature: function (feature, layer) {\n\t\t//\t\tlayer.bindTooltip(`index: ${feature.properties.index}`);\n\t\t//\t}\n\t\t//}).addTo(this._map);\n\n\t\t// calc XY lengths\n\t\tconst xGridLength = turf.distance(turf.point(bottomLeft), turf.point(bottomRight), { units: 'kilometers' });\n\t\tconst yGridLength = turf.distance(turf.point(bottomLeft), turf.point(topLeft), { units: 'kilometers' });\n\t\tconsole.log(`xGridLenth: ${xGridLength}, yGridLenth: ${yGridLength}`);\n\n\t\t// calc XY cell length of grid\n\t\tconst xCellLength = Math.floor(xGridLength / lengthKm);\n\t\tconst yCellLength = Math.floor(yGridLength / lengthKm);\n\t\tconst totalCells = xCellLength * yCellLength;\n\t\tconsole.log(`xCellLenth: ${xCellLength}, yCellLenth: ${yCellLength}`);\n\t\tconsole.log(`total cells: ${totalCells}`);\n\n\t\t// PUT EACH SNAPSHOT INTO A CELL\n\t\tconst points = this._flattenedPoints();\n\n\t\t// for each point get its offset from minX and minY\n\t\tpoints.features.forEach((f) => {\n\n\t\t\t// point dist from left\n\t\t\tconst xDist = turf.distance(\n\t\t\t\tturf.point(f.geometry.coordinates),\n\t\t\t\tturf.point([bounds.getEast(), f.geometry.coordinates[1]]),\n\t\t\t\t{ units: 'kilometers' }\n\t\t\t);\n\t\t\t// point dist from bottom\n\t\t\tconst yDist = turf.distance(\n\t\t\t\tturf.point(f.geometry.coordinates),\n\t\t\t\tturf.point([f.geometry.coordinates[0], bounds.getSouth()]),\n\t\t\t\t{ units: 'kilometers' }\n\t\t\t);\n\n\t\t\t// find the XY cell indices\n\t\t\tlet xCell = Math.round(xDist / lengthKm);\n\t\t\tlet yCell = Math.round(yDist / lengthKm);\n\n\t\t\t// translate 2D index into 1D index\n\t\t\tlet i = (xCell * yCellLength) + yCell;\n\t\t\tif (i >= totalCells) i = totalCells - 1;\n\n\t\t\tif (grid.features[i].properties.count) {\n\t\t\t\tgrid.features[i].properties.count++\n\t\t\t} else {\n\t\t\t\tgrid.features[i].properties['count'] = 1;\n\t\t\t}\n\n\t\t});\n\n\t\tconsole.log('tallied grid');\n\t\tconsole.log(grid);\n\t\tlet valid = 0;\n\t\tgrid.features.forEach((f) => { if (f.properties.count > 0) valid++; });\n\t\tconsole.log(valid);\n\n\t\t// USE EACH CELL AS A HEATMAP DATA POINT\n\t\tlet heatmapCells = [];\n\n\t\tgrid.features.forEach((f) => {\n\t\t\tif (f.properties.count) {\n\t\t\t\tlet centroid = turf.centroid(f);\n\t\t\t\theatmapCells.push({\n\t\t\t\t\tlat:   centroid.geometry.coordinates[1],\n\t\t\t\t\tlng:   centroid.geometry.coordinates[0],\n\t\t\t\t\tvalue: f.properties.count\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn heatmapCells;\n\t},\n\n\t/**\n\t * Create the L.canvas renderer and custom pane to display particles\n\t * @private\n\t */\n\t_createRenderer () {\n\t\t// create separate pane for canvas renderer\n\t\tthis._pane = this._map.createPane('particle-dispersion');\n\t\tthis._renderer = L.canvas({ pane: 'particle-dispersion' });\n\t},\n\n\t/**\n\t * Remove the particle layer from the map and clear our reference\n\t * @private\n\t */\n\t_clearDisplay () {\n\t\tif (this._particleLayer) this._map.removeLayer(this._particleLayer);\n\t\tthis._particleLayer = null;\n\t},\n\n\t/**\n\t * @summary Create a chroma-js color scale with user settings or auto scaled to keyframe range\n\t * @returns {Object} chromaJs color object\n\t * @private\n\t */\n\t_createColors () {\n\t\tif (!this.options.ageDomain) this.options.ageDomain = [0, Object.keys(this.options.data).length];\n\t\tthis._colors = chroma.scale(this.options.ageColorScale).domain(this.options.ageDomain);\n\t\treturn this._colors;\n\t},\n\n\t/**\n\t * Create the display layer (heatmap) for FINAL distribution.\n\t * @private\n\t */\n\t_initDisplayFinal () {\n\n\t\tthis._clearDisplay();\n\n\t\tif (this.options.data){\n\n\t\t\tthis._createColors();\n\t\t\tconst finalData = this._createFinalData();\n\t\t\tthis._particleLayer = heatBin(this.options.heatOptions);\n\t\t\tthis._particleLayer.addTo(this._map);\n\t\t\tthis._particleLayer.setData(finalData);\n\t\t}\n\t},\n\n\t/**\n\t * Process data into expected leaflet.heat format,\n\t * plotting only particles at their end of life\n\t * [ [lat, lon, intensity], ... ]\n\t * @private\n\t */\n\t_createFinalData () {\n\n\t\tlet finalData = [];\n\n\t\t//// get keys, moving forward in time\n\t\t//let keys = Object.keys(this.options.data);\n\t\t//keys.sort((a, b) => { return new Date(a) - new Date(b); });\n\t\t//\n\t\t//// flatten the data\n\t\t//let snapshots = [];\n\t\t//keys.forEach((key) => { snapshots = snapshots.concat(this.options.data[key]); });\n\t\t//\n\t\t//// get an array of uniq particles\n\t\t//let uids = [];\n\t\t//snapshots.forEach((snapshot) => {\n\t\t//\tif (uids.indexOf(snapshot[this._pidIndex]) === -1) uids.push(snapshot[this._pidIndex]);\n\t\t//});\n\t\t//\n\t\t//// step backwards from the end of the sim collecting\n\t\t//// final snapshots for each uniq particle\n\t\t//keys.reverse();\n\t\t//\n\t\t//for (let i = 0; i < keys.length; i++) {\n\t\t//\n\t\t//\tif (uids.length === 0) break;\n\t\t//\n\t\t//\t// check each particle in the snapshot\n\t\t//\tthis.options.data[keys[i]].forEach((snapshot) => {\n\t\t//\n\t\t//\t\t// if not recorded\n\t\t//\t\tlet index = uids.indexOf(snapshot[this._pidIndex]);\n\t\t//\t\tif (index !== -1) {\n\t\t//\n\t\t//\t\t\t// grab it, and remove it from the list\n\t\t//\t\t\tfinalData.push({\n\t\t//\t\t\t\tlat:   snapshot[this._pLatIndex],\n\t\t//\t\t\t\tlng:   snapshot[this._pLonIndex],\n\t\t//\t\t\t\tvalue: this.options.finalIntensity\n\t\t//\t\t\t});\n\t\t//\t\t\tuids.splice(index, 1);\n\t\t//\t\t}\n\t\t//\n\t\t//\t});\n\t\t//}\n\n\t\treturn {\n\t\t\tmax: 10,\n\t\t\tdata: finalData\n\t\t};\n\t},\n\n\t/**\n\t * Process data into expected leaflet.heat format,\n\t * plotting all particles for every snapshot\n\t * [ [lat, lon, intensity], ... ]\n\t * @private\n\t */\n\t_createExposureData () {\n\n\t\tlet exposureData = [];\n\t\tlet keys = Object.keys(this.options.data);\n\n\t\tkeys.forEach((key) => {\n\t\t\tthis.options.data[key].forEach((particle) => {\n\t\t\t\tlet point = { lat: particle[this._pLatIndex], lng: particle[this._pLonIndex] };\n\t\t\t\t// only add intensity if not binning\n\t\t\t\tif (!this.options.heatOptions && !this.options.heatOptions.enabled) {\n\t\t\t\t\tpoint.value = this.options.exposureIntensity\n\t\t\t\t}\n\t\t\t\texposureData.push(point);\n\t\t\t});\n\t\t});\n\n\t\treturn {\n\t\t\tmax: 10,\n\t\t\tdata: exposureData\n\t\t};\n\n\t\t//const gridPoints = this._computeHeatmapGrid();\n\t\t//console.log('gridPoints');\n\t\t//console.log(gridPoints);\n\t\t//\n\t\t//return {\n\t\t//\tmax: gridPoints.map((p) => { return p.value; }).reduce(function(a, b) { return Math.max(a, b); }) / 100,\n\t\t//\tdata: gridPoints\n\t\t//};\n\t\t//const points = this._flattenedPoints();\n\t\t//return {\n\t\t//\tmax: 10, // Math.max(gridPoints.map((p) => { return p.value; })),\n\t\t//\tdata: points.features.map((p) => {\n\t\t//\t\treturn {\n\t\t//\t\t\tlat: p.geometry.coordinates[1],\n\t\t//\t\t\tlng: p.geometry.coordinates[0],\n\t\t//\t\t\tvalue: this.options.exposureIntensity\n\t\t//\t\t}\n\t\t//\t})\n\t\t//};\n\t},\n\n\t/**\n\t * Create the display layer (heatmap) for cumulative EXPOSURE\n\t * @private\n\t */\n\t_initDisplayExposure () {\n\n\t\tthis._clearDisplay();\n\n\t\tif (this.options.data){\n\t\t\tthis._createColors();\n\t\t\tconst exposureData = this._createExposureData();\n\t\t\tthis._particleLayer = heatBin(this.options.heatOptions);\n\t\t\tthis._particleLayer.addTo(this._map);\n\t\t\tthis._particleLayer.setData(exposureData);\n\t\t}\n\t},\n\n\t/**\n\t * Create the display layer (L.CircleMarkers) for KEYFRAME's\n\t * @private\n\t */\n\t_initDisplayKeyframe () {\n\n\t\tthis._clearDisplay();\n\n\t\tif (this.options.data){\n\t\t\t// init the feature group and display first frame\n\t\t\tthis._createColors();\n\t\t\tthis._particleLayer = L.featureGroup();\n\t\t\tthis._markers = [];\n\t\t\tthis.setFrameIndex(this._frameIndex);\n\t\t\tthis._particleLayer.addTo(this._map);\n\t\t} else {\n\t\t\tconsole.error('Attempted to display keyframes but there is no data.')\n\t\t}\n\t},\n\n\t/**\n\t * Deep merge Objects,\n\t * Note that destination arrays will be overwritten where they exist in source.\n\t * @param destination\n\t * @param source\n\t * @returns {*}\n\t */\n\t_extendObject (destination, source) {\n\t\tlet self = this;\n\t\tfor (const property in source) {\n\t\t\t// .constructor avoids tripping over prototypes etc.\n\t\t\t// don't traverse the data..\n\t\t\tif (property === 'data') {\n\t\t\t\tdestination[property] = source[property];\n\t\t\t} else if (source[property] && source[property].constructor && source[property].constructor === Object) {\n\t\t\t\tdestination[property] = destination[property] || {};\n\t\t\t\tself._extendObject(destination[property], source[property]);\n\t\t\t} else {\n\t\t\t\tdestination[property] = source[property];\n\t\t\t}\n\t\t}\n\t\treturn destination;\n\t}\n\n});\n\nL.particleDispersionLayer = function(options) {\n\treturn new ParticleDispersionLayer(options);\n};\n\nexport default L.particleDispersionLayer;\n\n\n\n\n"],"names":["ParticleDispersionLayer","L","Layer","Class","extend","_pidIndex","_pLatIndex","_pLonIndex","_pDepthIndex","_pAgeIndex","_particleLayer","_frameIndex","_markers","_colors","_active","_map","_renderer","_pane","options","data","displayMode","startFrameIndex","ageColorScale","ageDomain","heatOptions","blur","latField","lngField","valueField","exposureIntensity","finalIntensity","initialize","_extendObject","onAdd","map","_createRenderer","setDisplayMode","onRemove","removeLayer","DomUtil","remove","isActive","setData","setOptions","update","mode","_initDisplayExposure","_initDisplayFinal","_initDisplayKeyframe","console","error","getDisplayMode","setFrameIndex","index","self","keys","Object","frame","clearLayers","i","length","particle","pos","wrapLatLng","marker","circleMarker","renderer","stroke","fillOpacity","radius","fillColor","hex","_feature","push","addLayer","getLatLngBounds","snapshots","_flattened","latLngBounds","s","forEach","key","concat","_flattenedPoints","type","features","_computeHeatmapGrid","bounds","bbox","getWest","getNorth","getEast","getSouth","bottomLeft","bottomRight","topLeft","topRight","lengthKm","grid","turf","squareGrid","units","reverse","f","properties","log","xGridLength","distance","point","yGridLength","xCellLength","Math","floor","yCellLength","totalCells","points","xDist","geometry","coordinates","yDist","xCell","round","yCell","count","valid","heatmapCells","centroid","lat","lng","value","createPane","canvas","pane","_clearDisplay","_createColors","chroma","scale","domain","finalData","_createFinalData","heatBin","addTo","max","_createExposureData","exposureData","enabled","featureGroup","destination","source","property","constructor","particleDispersionLayer"],"mappings":"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"}